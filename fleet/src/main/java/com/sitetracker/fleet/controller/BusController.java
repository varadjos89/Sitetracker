package com.sitetracker.fleet.controller;

import com.sitetracker.fleet.pojo.Bus;
import com.sitetracker.fleet.pojo.BusCondition;
import com.sitetracker.fleet.service.BusService;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Optional;

import static com.sitetracker.fleet.constants.BusStatus.READY_FOR_USE;

@RestController
public class BusController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BusService busService;

    JSONObject jo;
    String error;

    @GetMapping(path="/all")
    @ResponseBody
    public  List<Bus> getAllBuses() {
        // This returns a JSON or XML with the users
        return busService.getAllBuses();
    }

    @GetMapping(path="/every")
    public ResponseEntity<Optional> getEvery() {
        try {
            List<Bus> buses = busService.getAllBuses();
            if (!buses.isEmpty()) {
                return new ResponseEntity<>(Optional.of(buses), HttpStatus.OK);
            } else {
                error = "{\"error\": \"Buses not found\"}";
                jo = new JSONObject(error);
                return new ResponseEntity<>(Optional.of(jo.toString()), HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            error = "{\"error\": \"Something went wrong in the backend!!\"}";
            jo = new JSONObject(error);
            return new ResponseEntity<>(Optional.of(jo.toString()), HttpStatus.BAD_REQUEST);
        }
    }

    @GetMapping(path="/calculate")
    public ResponseEntity<Optional> getResaleValue(HttpServletRequest request){
        try {
            int status= Integer.parseInt(request.getParameter("status"));
            int capacity= Integer.parseInt(request.getParameter("capacity"));
            long reading= Long.parseLong(request.getParameter("reading"));
            boolean air_conditioning=  Boolean.parseBoolean(request.getParameter("ac"));
            int year= Integer.parseInt(request.getParameter("year"));

            List<BusCondition> conditions = busService.getBusConditions();
            double odometerFactor = conditions.get(0).getPrice_percentage();
            double increasedAirConditioningRate = conditions.get(1).getPrice_percentage();
            double ageIncreasedRate = conditions.get(2).getPrice_percentage();
            if (status == READY_FOR_USE) {
                double startingPrice = busService.getStartingSalePrice(capacity);
                if (reading > 100000) {
                    double extraMiles = reading - 100000;
                    startingPrice = startingPrice + (extraMiles * odometerFactor);
                }
                if (air_conditioning) {
                    startingPrice = startingPrice + (startingPrice * increasedAirConditioningRate);
                }
                if (year <= 1972) {
                    startingPrice = startingPrice + (startingPrice * ageIncreasedRate);
                }
                startingPrice = Math.round(startingPrice * 100.0) / 100.0;
                return new ResponseEntity<>(Optional.of(startingPrice), HttpStatus.OK);
            } else {
                return new ResponseEntity<>(Optional.of(0), HttpStatus.OK);
            }
        }catch (Exception e) {
            error = "{\"error\": \"Something went wrong in the backend!!\"}";
            e.printStackTrace();
            jo = new JSONObject(error);
            return new ResponseEntity<>(Optional.of(0), HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping(path="/save")
    public ResponseEntity<Optional> saveData(@RequestBody Bus bus) {
        System.out.println(bus.toString());
        busService.saveBus(bus);
        error = "{\"Success\": \"Data Saved\"}";
        jo = new JSONObject(error);
        return new ResponseEntity<>(Optional.of(jo.toString()), HttpStatus.OK);
    }

}
